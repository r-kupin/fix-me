x-common-environment: &common-environment
  DB_STOCK_NAME: ${DB_STOCK_NAME}
  DB_STOCK_USERNAME: ${DB_STOCK_USERNAME}
  DB_STOCK_PASSWORD: ${DB_STOCK_PASSWORD}
  DB_CLIENT_NAME: ${DB_CLIENT_NAME}
  DB_CLIENT_USERNAME: ${DB_CLIENT_USERNAME}
  DB_CLIENT_PASSWORD: ${DB_CLIENT_PASSWORD}
  DB_ADMIN_PASSWORD: ${DB_ADMIN_PASSWORD}
  DB_HOST: ${DB_HOST}
  DB_PORT: ${DB_PORT}
  EUREKA_HOST: ${EUREKA_HOST}
  EUREKA_PORT: ${EUREKA_PORT}
  EUREKA_URI: ${EUREKA_URI}
  ROUTER_HOST: ${ROUTER_HOST}
  ROUTER_EXCHANGE_PORT: ${ROUTER_EXCHANGE_PORT}
  ROUTER_BROKER_PORT: ${ROUTER_BROKER_PORT}
  CLIENT_PORT: ${CLIENT_PORT}
  GATEWAY_PORT: ${GATEWAY_PORT}

services:
  mariadb:
    build:
      context: mariadb
      dockerfile: Dockerfile
      args:
        DB_STOCK_NAME: ${DB_STOCK_NAME}
        DB_STOCK_USERNAME: ${DB_STOCK_USERNAME}
        DB_STOCK_PASSWORD: ${DB_STOCK_PASSWORD}
        DB_CLIENT_NAME: ${DB_CLIENT_NAME}
        DB_CLIENT_USERNAME: ${DB_CLIENT_USERNAME}
        DB_CLIENT_PASSWORD: ${DB_CLIENT_PASSWORD}
        DB_ADMIN_PASSWORD: ${DB_ADMIN_PASSWORD}
    environment:
      <<: *common-environment
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - fix-me-network
    volumes:
      - mariadb_volume:/var/lib/mysql
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  eureka-server:
    build:
      context: eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    environment:
      <<: *common-environment
    ports:
      - "${EUREKA_PORT}:${EUREKA_PORT}"
    networks:
      - fix-me-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${EUREKA_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  router-service:
    build:
      context: router-service
    container_name: router-service
    environment:
      <<: *common-environment
    networks:
      - fix-me-network
    depends_on:
      eureka-server:
        condition: service_healthy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  broker-service:
    build:
      context: broker-service
    environment:
      <<: *common-environment
    networks:
      - fix-me-network
    depends_on:
      router-service:
        condition: service_started
      eureka-server:
        condition: service_healthy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  exchange-service:
    build:
      context: exchange-service
      args:
        DB_STOCK_USERNAME: ${DB_STOCK_USERNAME}
        DB_STOCK_PASSWORD: ${DB_STOCK_PASSWORD}
    environment:
      <<: *common-environment
    networks:
      - fix-me-network
    depends_on:
      mariadb:
        condition: service_started
      router-service:
        condition: service_started
      eureka-server:
        condition: service_healthy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  gateway-service:
    build:
      context: gateway-service
    container_name: gateway-service
    environment:
      <<: *common-environment
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    networks:
      - fix-me-network
    depends_on:
      broker-service:
        condition: service_started
      eureka-server:
        condition: service_healthy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  fix-me-network:
    driver: bridge

volumes:
  mariadb_volume:
